'use strict';

var normalizeOptions     = require('es5-ext/object/normalize-options')
  , deferred             = require('deferred')
  , PostControllerRouter = require('post-controller-router')
  , sendOk               = require('../lib/server/utils/send-ok')
  , sendJSON             = require('../lib/server/utils/send-json')
  , sendError            = require('../lib/server/utils/send-error')
  , logError             = require('../lib/server/utils/log-error')
  , validate             = require('../utils/validate')
  , save                 = require('../utils/save')
  , serializeError       = require('../utils/serialize-error')
  , mano                 = require('../')
  , baseRoutes           = require('../controller/server')

  , db = mano.db, _ = mano.i18n.bind('Controller')
  , isDbReleased;

require('dbjs-dom/input')(db);
if (db.Date) require('dbjs-dom/input/date-time/date')(db);
if (db.Time) require('dbjs-dom/input/number/integer/u-integer/time')(db);
if (db.Percentage) require('dbjs-dom/input/number/percentage')(db);
if (db.File) require('dbjs-dom/input/object/file.dom')(db);
if (db.Email) require('dbjs-dom/input/string/string-line/email')(db);

var dbRelease = function () {
	if (isDbReleased) return;
	isDbReleased = true;
	db._postponed_ -= 1;
};

module.exports = exports = function (routes, legacyPool) {
	var router = new PostControllerRouter(normalizeOptions(baseRoutes, routes), {
		validate: validate,
		submit: save
	});
	return function (data) {
		var req = this.req, res = this.res, path = req._parsedUrl.pathname, result, def
		  , uploads, routeError, isRouteError;

		this.user = db.User.getById(this.req.$user);
		this.dbRelease = dbRelease;
		isDbReleased = false;
		db._postponed_ += 1;
		try {
			result = router.routeEvent(this, path, data);
		} catch (e) {
			routeError = e;
			isRouteError = true;
			result = router.lastRouteData;
		}
		if (!isDbReleased) dbRelease();
		deferred.resolve(result)(function (data) {
			result = data;
		}, function (e) {
			routeError = e;
			isRouteError = true;
			result = router.lastRouteData;
		}).done(function () {
			if (!isRouteError && !result) {
				if (!legacyPool || !req.cookies.get('legacy')) {
					res.statusCode = 404;
					res.end('Not Found');
				} else {
					legacyPool.postMessages[req.$clientId] = {
						action: path + (req._parsedUrl.search || ''),
						error: { message: _("Submission of this form is not supported") }
					};
					res.writeHead(303, { Location: req.headers.referer || '/' });
					res.end();
				}
				return;
			}
			def = deferred();
			if (isRouteError) def.reject(routeError);
			else def.resolve(result.result);
			if (db.File) {
				uploads = db.File.uploadsInProgress || [];
				db.File.uploadsInProgress = [];
			} else {
				uploads = [];
			}
			deferred(def.promise, deferred.map(uploads)).done(function (data) {
				var url, isRedirected;
				data = data[0];
				if (result.conf.redirectUrl) {
					url = result.conf.redirectUrl;
					if (typeof url === 'function') url = url.call(this);
				}
				if (!url) {
					url = req.headers.referer || '/';
					if (result.conf.formHtmlId) {
						url += '#';
						if (typeof result.conf.formHtmlId === 'function') {
							url += result.conf.formHtmlId.call(this);
						} else {
							url += result.conf.formHtmlId;
						}
					}
				} else {
					isRedirected = true;
				}
				if (!legacyPool || !req.cookies.get('legacy')) {
					if (data === true) {
						sendOk.call(res);
					} else if (data) {
						if (typeof data === 'string') sendOk.call(res, data);
						else sendJSON.call(res, data);
					} else {
						res.writeHead(303, { Location: url });
						res.end();
					}
					return;
				}
				if (isRedirected) {
					if (data && data.message) {
						legacyPool.postMessages[req.$clientId] = {
							action: path + (req._parsedUrl.search || ''),
							message: String(data.message)
						};
					}
				}
				res.writeHead(303, { Location: url });
				res.end();
			}.bind(this), function (error) {
				var url;
				error = Object(error);
				if ((error.fieldName || error.errors) && !error.statusCode) error.statusCode = 400;
				if (!legacyPool || !req.cookies.get('legacy')) {
					sendError.call(res, error);
					return;
				}
				logError(error);
				legacyPool.postMessages[req.$clientId] = {
					action: path + (req._parsedUrl.search || ''),
					error: serializeError(error)
				};
				url = req.headers.referer || '/';
				if (result.conf.formHtmlId) {
					url += '#';
					if (typeof result.conf.formHtmlId === 'function') {
						url += result.conf.formHtmlId.call(result.event);
					} else {
						url += result.conf.formHtmlId;
					}
				}
				res.writeHead(303, { Location: url });
				res.end();
			});
		}.bind(this));
	};
};
exports.validate = validate;
exports.submit = save;
